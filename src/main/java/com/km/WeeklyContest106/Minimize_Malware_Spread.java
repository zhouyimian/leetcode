package com.km.WeeklyContest106;

import java.util.Arrays;

public class Minimize_Malware_Spread {
	public int minMalwareSpread(int[][] graph, int[] initial) {
		int[] parent = new int[graph.length];
		for (int i = 0; i < graph.length; i++)
			parent[i] = i;
		for (int i = 0; i < graph.length; i++) {
			for (int j = 0; j < graph[i].length; j++) {
				if (graph[i][j] == 1 && i != j) {
					int iparent = find(parent, i);
					int jparent = find(parent, j);
					if(iparent!=jparent) {
						for(int k=0;k<parent.length;k++)
							parent[k]=parent[k]==jparent?iparent:parent[k];
					}
				}
			}
		}
		int[] bcj_size = new int[graph.length];
		boolean[] vis = new boolean[graph.length];
		for (int i = 0; i < graph.length; i++) {
			if (vis[i])
				continue;
			int size = 1;
			vis[i] = true;
			for (int j = i + 1; j < graph.length; j++) {
				if (!vis[j] && parent[j] == parent[i]) {
					size++;
				}
			}
			bcj_size[i] = size;
			for (int j = i + 1; j < graph.length; j++) {
				if (!vis[j] && parent[j] == parent[i]) {
					vis[j] = true;
					bcj_size[j] = size;
				}
			}
		}
		Arrays.sort(initial);
		boolean flag = false;
		int max = Integer.MIN_VALUE;
		int max_index = -1;
		for (int i = 0; i < initial.length; i++) {
			if (parent[initial[i]] == initial[i]) {
				for (int j = i + 1; j < initial.length; j++) {
					if (parent[initial[j]] == initial[i]) {
						flag = true;
						break;
					}
				}
			}
			if (!flag) {
				if (max_index == -1) {
					max_index = initial[i];
					max = bcj_size[initial[i]];
				} else if (bcj_size[initial[i]] > max) {
					max = bcj_size[initial[i]];
					max_index = initial[i];
				}
			}
		}

		return max_index == -1 ? initial[0] : max_index;
	}

	public int find(int[] parent, int i) {
		while (i != parent[i])
			i = parent[i];
		return i;
	}

	public static void main(String[] args) {
		int[][] graph = { { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }, { 1, 1, 0, 0, 0, 0, 0, 0, 0, 1 },
				{ 0, 0, 1, 0, 1, 0, 0, 0, 0, 1 }, { 0, 0, 0, 1, 0, 0, 0, 0, 0, 1 }, { 0, 0, 1, 0, 1, 0, 1, 0, 0, 1 },
				{ 0, 0, 0, 0, 0, 1, 1, 0, 0, 0 }, { 0, 0, 0, 0, 1, 1, 1, 0, 0, 1 }, { 0, 0, 0, 0, 0, 0, 0, 1, 1, 0 },
				{ 0, 0, 0, 0, 0, 0, 0, 1, 1, 0 }, { 0, 1, 1, 1, 1, 0, 1, 0, 0, 1 } };
		int[] init = { 9, 0, 2 };
		Minimize_Malware_Spread test = new Minimize_Malware_Spread();
		System.out.println(test.minMalwareSpread(graph, init));
	}

}
